{"version":3,"sources":["reportWebVitals.js","components/shared/settings.js","components/CustomForm.jsx","components/shuffle.js","components/shared/text.js","components/Header.jsx","components/Footer.jsx","components/Main.jsx","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SETTINGS","jsonbin","product_profiles","n_attributes","n_questions","it","attributes","mask","en","CustomForm","props","n_question","DATA","data","useState","Set","selected","setselected","control","setcontrol","j","trial","saveSelect","id","idx","row_check","Math","floor","has","document","getElementById","style","backgroundColor","prev","filter","x","add","length","alert","useEffect","forEach","r","box","btn","innerText","renderedOptions","slice","map","HandleChecked","color","className","onClick","lang","toast","error","AttributesLevels","renderedAttributes","i","push","xs","sm","Attributes","window","innerWidth","size","missing","join","FRESH_DATA","isChoiced","axios","res","success","padding","catch","e","console","log","JSON","stringify","message","onFinalSubmit","shuffle_data","arr","temp","index","shuffled","random","getRandomSubarray","TEXT","title","description","h2","url","Header","Fragment","src","process","alt","fontSize","md","langF","countryCode","svg","scrollIntoView","behavior","Footer","paddingTop","type","href","Main","state","previous","changeLang","bind","val","this","setState","SHUFFLE_DATA","Component","App","ReactDOM","render","StrictMode"],"mappings":"u/TAAA,IAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sHCPDQ,EAAW,CACpBC,QAAS,oDACTC,iBAAiB,EACjBC,aAAa,EACbC,YAAY,GAEZC,GAAI,CACAC,WAAY,CACR,EAAG,UACH,EAAG,oBACH,EAAG,0BACH,EAAG,yBACH,EAAG,2BACH,EAAG,yBACH,EAAG,iBACH,EAAG,yBACH,EAAG,iBAEPC,KAAK,CACD,EAAG,CAAC,EAAE,oBAAqB,EAAE,aAAc,EAAE,oBAC7C,EAAG,CAAC,EAAE,oBAAsB,EAAE,6BAC9B,EAAG,CAAC,EAAE,eAAgB,EAAE,UAAW,EAAE,2BACrC,EAAG,CAAC,EAAE,eAAgB,EAAE,WAAY,EAAE,aACtC,EAAG,CAAC,EAAG,wBAA0B,EAAE,SAAU,EAAE,WAAY,EAAE,SAC7D,EAAG,CAAC,EAAE,YAAa,EAAE,OAAQ,EAAE,QAC/B,EAAG,CAAC,EAAE,aAAc,EAAE,QACtB,EAAG,CAAC,EAAE,oBAAqB,EAAE,QAAS,EAAE,qBACxC,EAAG,CAAC,EAAE,SAAU,EAAE,iBAK1BC,GAAI,CACAF,WAAY,CACR,EAAG,WACH,EAAG,eACH,EAAG,qBACH,EAAG,QACH,EAAG,sBACH,EAAG,uBACH,EAAG,mBACH,EAAG,uBACH,EAAG,iBAEPC,KAAK,CACD,EAAG,CAAC,EAAE,oBAAqB,EAAE,aAAc,EAAE,oBAC7C,EAAG,CAAC,EAAE,iBAAkB,EAAE,6BAC1B,EAAG,CAAC,EAAE,SAAU,EAAE,UAAW,EAAE,6BAC/B,EAAG,CAAC,EAAE,kBAAmB,EAAE,WAAY,EAAE,aACzC,EAAG,CAAC,EAAG,2BAA4B,EAAE,SAAU,EAAE,QAAS,EAAE,QAC5D,EAAG,CAAC,EAAE,0BAA2B,EAAE,OAAQ,EAAE,QAC7C,EAAG,CAAC,EAAE,gBAAiB,EAAE,QACzB,EAAG,CAAC,EAAE,wBAAyB,EAAE,UAAW,EAAE,0BAC9C,EAAG,CAAC,EAAE,SAAU,EAAE,gB,OC4HfE,EA3KI,SAACC,GAEhB,IAAMR,EAAmBF,EAASE,iBAC5BC,EAAeH,EAASG,aACxBQ,EAAaX,EAASI,YACtBQ,EAAOF,EAAMG,KAEnB,EAAgCC,mBAAS,IAAIC,KAA7C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BH,mBAAS,IAAIC,KAA3C,mBAAOG,EAAP,KAAgBC,EAAhB,KACI,EAAa,CAAC,EAAG,GAAI,IAApBC,EAAL,KAAQC,EAAR,KAaA,SAASC,EAAWC,EAAIC,GACpB,IAAIC,EAAYC,KAAKC,MAAMH,EAAI,KAC3BR,EAASY,IAAIL,IACHM,SAASC,eAAT,cAA+BP,IACrCQ,MAAMC,gBAAkB,qBAC5Bb,GAAW,SAAAc,GAAI,OAAI,IAAIlB,IAAI,YAAIkB,GAAMC,QAAO,SAAAC,GAAC,OAAIA,IAAMV,SACvDR,GAAY,SAAAgB,GAAI,OAAI,IAAIlB,IAAI,YAAIkB,GAAMC,QAAO,SAAAC,GAAC,OAAIA,IAAMZ,WAExDJ,GAAW,SAAAc,GAAI,OAAI,IAAIlB,IAAIkB,EAAKG,IAAIX,OACpCR,GAAY,SAAAgB,GAAI,OAAI,IAAIlB,IAAIkB,EAAKG,IAAIb,QApBzCX,EAAKyB,OAASnC,IAAqB,GAAGoC,MAAM,8BAEhDC,qBAAU,WACNvB,EAASwB,SAAQ,SAAAC,GACb,IAAIC,EAAMb,SAASC,eAAT,cAA+BW,IACrCE,EAAMd,SAASC,eAAT,cAA+BW,IACzCC,EAAIX,MAAMC,gBAAkB,aAC5BW,EAAIZ,MAAMC,gBAAiB,wBAC3BW,EAAIC,UAAU,iBA6CtB,IAhE0B,eAgEjBpB,GACLJ,IACA,IACMyB,EADUjC,EAAKkC,MAAMtB,EAAKA,EAAKtB,GACL6C,KAAK,SAAAN,GACjC,IAAMO,EAAgB,WAClB,OAAI9B,EAAQU,IAAIF,KAAKC,MAAMH,EAAI,OAAUR,EAASY,IAAIa,EAAElB,IAEhD,cAAC,IAAD,CAAQ0B,MAAM,UACV1B,GAAE,cAASkB,EAAElB,IACb2B,UAAU,sBACVC,QAAS,WAAK7B,EAAWmB,EAAElB,GAAIC,IAHnC,SAIkB,OAAbd,EAAM0C,KAAY,6CAAuB,2CAJhBX,EAAElB,IAM/BL,EAAQU,IAAIF,KAAKC,MAAMH,EAAI,MAE5B,cAAC,IAAD,CAAQyB,MAAM,UACV1B,GAAE,cAASkB,EAAElB,IACb2B,UAAU,sBACVC,QAAS,WAAME,IAAMC,MACjB,+BACc,OAAb5C,EAAM0C,KACP,+EAC4C,uBAAK,uBADjD,qFAKA,qEACqC,uBADrC,wCAIS,CAAErB,MAAO,CAACC,gBAAgB,yBAf3C,SAkBkB,OAAbtB,EAAM0C,KAAY,6CAAuB,2CAlBfX,EAAElB,IAsBjC,cAAC,IAAD,CAAQ0B,MAAM,UACV1B,GAAE,cAASkB,EAAElB,IACb2B,UAAU,sBACVC,QAAS,WAAM7B,EAAWmB,EAAElB,GAAIC,IAHpC,SAIkB,OAAbd,EAAM0C,KAAY,6CAAuB,2CAJhBX,EAAElB,KAStCgC,EAAmB,WAErB,IADA,IAAIC,EAAqB,GAChBC,EAAI,EAAGA,EAAItD,EAAcsD,IAC9BD,EAAmBE,KAAK,eAAC,IAAD,CAAKC,GAAG,KAAR,cAA+B3D,EAASU,EAAM0C,MAAM7C,KAAKkD,GAAGhB,EAAEgB,MAA5C,QAAQA,IACtD,OAAOD,GAGX,OACA,eAAC,IAAD,CAAKI,GAAG,IAAIV,UAAU,4BAA4B3B,GAAE,cAASkB,EAAElB,IAA/D,UACI,cAAEgC,EAAF,IACJ,cAAC,IAAD,CAAKI,GAAG,KAAR,SACI,cAAEX,EAAF,QAHsE,QAAQP,EAAElB,OASlFsC,EAAa,WAEf,IADA,IAAIvD,EAAa,GACRmD,EAAI,EAAGA,EAAItD,EAAcsD,IAC9BnD,EAAWoD,KAAK,cAAC,IAAD,CAAKC,GAAG,KAAR,SAAkC3D,EAASU,EAAM0C,MAAM9C,WAAW,CAACmD,KAAjD,YAAYA,IAClD,OAAOnD,GAGXe,EAAMqC,KACF,eAAC,IAAD,CAAKR,UAAU,4CAAf,UACI,eAAC,IAAD,CAAKS,GAAG,KAAR,UACI,6BAAkB,OAAbjD,EAAM0C,KAAY,0CAAahC,EAAb,IAAiBpB,EAASI,eAAiB,2CAAcgB,EAAd,IAAkBpB,EAASI,iBAC7F,6BACkB,OAAbM,EAAM0C,KAAY,uEAClB,wEAGT,eAAC,IAAD,CAAKQ,GAAG,IAAIV,UAAU,8BAAtB,UACI,6BAAkB,OAAbxC,EAAM0C,KAAY,+DAAsC,2DAC7D,cAACS,EAAD,IACCC,OAAOC,WAAW,IAAK,cAAC,IAAD,CAAKJ,GAAG,KAAKT,UAAU,sBAAvB,kBAA0D,QAEjFL,IAbuDzB,KAvE/DI,EAAM,EAAGA,EAAMZ,EAAKyB,OAAQb,GAAK,EAAG,EAApCA,GA2FT,OACI,eAAC,IAAD,CAAW0B,UAAU,iCAArB,UACK,cAAC,IAAD,IACD,oBAAIA,UAAU,qBAAqB3B,GAAG,QAAtC,SACkB,OAAbb,EAAM0C,KAAa,gDAA2B,4CAElD/B,EACD,cAAC,IAAD,CAAK6B,UAAU,mBAAf,SACI,cAAC,IAAD,CAAQD,MAAM,UAAUC,UAAU,cAAcC,QAAS,kBAjIrE,WACI,GAAInC,EAASgD,KAAOrD,EAAY,CAE5B,IADA,IAAIsD,EAAU,GACLR,EAAE,EAAGA,EAAI9C,EAAY8C,IAAUvC,EAAQU,IAAI6B,IAAIQ,EAAQP,KAAKD,GACrEJ,IAAMC,MACN,+BACkB,OAAb5C,EAAM0C,KACP,mGAAqE,uBAAK,uBAA1E,IAAiFa,EAAQC,KAAK,SAE9F,kEAAoC,uBAAK,uBAAzC,IAAgDD,EAAQC,KAAK,gBAGjE,CACA,IAAMC,EAAavD,EAAKmC,KAAI,SAAAN,GAExB,OADAzB,EAASY,IAAIa,EAAElB,IAAKkB,EAAE2B,UAAY,EAAG3B,EAAE2B,UAAY,EAC5C3B,KAGX4B,MAAUrE,EAASC,QAAQ,UACtBP,MAAK,SAAA4E,GACF,IAAIrC,EAAOqC,EAAIzD,KACfoB,EAAKyB,KAAKS,GACVE,MAAUrE,EAASC,QAASgC,GACvBvC,KAAK2D,IAAMkB,QAAQ,uBAAwB,CAACxC,MAAO,CAACyC,QAAQ,YAC5DC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,CAACF,YAChCD,OAAM,SAAAC,GAAC,OAAKpC,MAAM,0FAA6FuC,KAAKC,UAAUJ,EAAEK,cAwGpEC,IAA7D,SACkB,OAAbtE,EAAM0C,KAAa,sDAAiC,uDC1J1D6B,MAdf,SAAsBpE,GAWlB,OAVA,SAA2BqE,EAAKlB,GAE5B,IADA,IAA6CmB,EAAMC,EAA/CC,EAAWH,EAAIpC,MAAM,GAAIW,EAAIyB,EAAI7C,OAC9BoB,KAEH0B,EAAOE,EADPD,EAAQ1D,KAAKC,OAAO8B,EAAI,GAAK/B,KAAK4D,WAElCD,EAASD,GAASC,EAAS5B,GAC3B4B,EAAS5B,GAAK0B,EAElB,OAAOE,EAASvC,MAAM,EAAGkB,GAErBuB,CAAkB1E,EAAMb,EAASI,YAAcJ,EAASE,mB,QCZvDsF,EAAO,CAChBhF,GAAI,CACAiF,MAAO,6CACPC,YACI,8DAEI,uBAFJ,wSAOI,uBAPJ,sBASI,uBAAK,uBATT,kBAWY,+BACI,2HACA,yKACA,mKAER,uBAhBR,sBAkBY,+BACI,kDACA,4DAER,uBACA,uBAvBR,4BAyBY,+BACI,0CACA,4CACA,gEAER,uBA9BR,gBAgCY,+BACI,mDACA,4CACA,gDAER,uBArCR,+BAuCY,+BACI,4DACA,0CACA,yCACA,wEAER,uBA7CR,+BA+CY,+BACI,4DACA,wCACA,2CAER,uBApDR,2BAsDY,+BACI,iDACA,mEAER,uBACA,uBA3DR,+BA6DY,+BACI,yDACA,2CACA,6DAER,uBACA,uBAnER,wBAqEY,+BACI,+GACA,iMAER,uBAzER,wDA8EJC,GAAI,kDACJC,IAAK,6CAITvF,GAAI,CACAoF,MAAO,6CACPC,YACI,gEAEI,uBAFJ,kTAQI,uBARJ,iEAUI,uBAAK,uBAVT,iBAYY,+BACI,kHACA,iKACA,0JAER,uBAjBR,2BAmBY,+BACI,qDACA,iEAER,uBACA,uBAxBR,iCA0BY,+BACI,yCACA,4CACA,+DAER,uBA/BR,iCAiCY,+BACI,gDACA,4CACA,gDAER,uBAtCR,mCAwCY,+BACI,yDACA,0CACA,4CACA,8EAER,uBA9CR,iCAgDY,+BACI,8CACA,wCACA,2CAER,uBArDR,yBAuDY,+BACI,8CACA,6DAER,uBACA,uBA5DR,iCA8DY,+BACI,qDACA,yCACA,wDAER,uBACA,uBApER,wBAsEY,+BACI,+GACA,2MAER,uBA1ER,iEA+EJC,GAAI,kDACJC,IAAK,8CCjIEC,G,MApCA,SAACnF,GACZ,OACI,eAAC,IAAMoF,SAAP,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKnC,GAAG,KAAR,SACI,qBAAKoC,IAAMC,kBAAoC9C,UAAU,aAAa+C,IAAI,sBAGlF,qBAAK/C,UAAU,gBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKS,GAAG,KAAKC,GAAG,OAAhB,SACI,qBAAIV,UAAU,aAAd,cAA8BsC,EAAK9E,EAAM0C,MAAMqC,MAAM,uBAAM,sBAAM1D,MAAO,CAAEmE,SAAU,UAAzB,+CAE/D,eAAC,IAAD,CAAKvC,GAAG,KAAKwC,GAAG,OAAOjD,UAAU,gCAAjC,UACI,cAAC,IAAD,CAAQC,QAAS,kBAAMzC,EAAM0F,MAAM,OAAOlD,UAAU,iBAApD,SACI,cAAC,IAAD,CAAkBmD,YAAY,KAAKC,KAAG,EAACpD,UAAU,mBAErD,cAAC,IAAD,CAAQC,QAAS,kBAAMzC,EAAM0F,MAAM,OAAOlD,UAAU,iBAApD,SACI,cAAC,IAAD,CAAkBmD,YAAY,KAAKC,KAAG,EAACpD,UAAU,sBAGzD,eAAC,IAAD,CAAKS,GAAG,KAAKT,UAAU,wBAAvB,UAA+C,uBAAOsC,EAAK9E,EAAM0C,MAAMsC,YAAY,0BACnF,eAAC,IAAD,CAAK/B,GAAG,KAAKT,UAAU,6BAAvB,UACI,uBACA,cAAC,IAAD,CAAQD,MAAM,UAAUC,UAAU,cAAcC,QAAS,WAAQtB,SAASC,eAAe,SAASyE,eAAe,CAAEC,SAAU,YAA7H,SACoB,OAAf9F,EAAM0C,KAAgB,uDAAmC,sDAE9D,oCCATqD,EA/BO,WAClB,OACI,cAAC,IAAD,CAAKvD,UAAU,8BAAf,SACI,eAAC,IAAD,CAAWnB,MAAO,CAAC2E,WAAW,QAA9B,UACA,cAAC,IAAD,CAAKxD,UAAU,cAAf,SACI,iEAEJ,cAAC,IAAD,CAAKA,UAAU,oBAAf,SACA,eAAC,IAAD,CAAMyD,KAAK,SAAX,UACgB,cAAC,IAAD,UACI,mBAAGC,KAAK,sCAAR,SACI,mBAAG1D,UAAU,2BAGrB,cAAC,IAAD,UACI,mBAAG0D,KAAK,2DAAR,SACI,mBAAG1D,UAAU,6BAGrB,cAAC,IAAD,UACI,mBAAG0D,KAAK,uCAAR,SACI,mBAAG1D,UAAU,0CCgBlC2D,E,kDA3BX,WAAYnG,GAAQ,IAAD,8BACf,cAAMA,IACDoG,MAAQ,CAAE1D,KAAK,KAAM2D,SAAS,MACnC,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHH,E,8CAKnB,SAAWC,GAAKC,KAAKC,SAAS,CAAChE,KAAK8D,M,+BACpC,c,oBAMA,WACI,IACMG,EAAepC,EADRpE,GAEb,OACA,eAAC,IAAMiF,SAAP,WACI,eAAC,IAAD,CAAW5C,UAAU,iBAArB,UACI,cAAC,EAAD,CAAQE,KAAM+D,KAAKL,MAAM1D,KAAMgD,MAAOe,KAAKH,aAC3C,cAAC,EAAD,CAAY5D,KAAM+D,KAAKL,MAAM1D,KAAMvC,KAAMwG,OAE7C,cAAC,EAAD,W,GAtBQC,a,MCCLC,MARf,WACE,OACE,cAAC,IAAMzB,SAAP,UACE,cAAC,EAAD,O,YCEN0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7F,SAASC,eAAe,SAG1BvC,M","file":"static/js/main.f0dfc465.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const SETTINGS = {\n    jsonbin: \"https://api.jsonbin.io/b/61c24ecff8c69823dd3fc1e5\",\n    product_profiles:3,\n    n_attributes:9,\n    n_questions:15 ,\n\n    it: {\n        attributes: {\n            0: \"Regista\",\n            1: \"Tipologia di film\",\n            2: \"Tipologia di personaggi\",\n            3: \"Genere cinematografico\",\n            4: \"Ambientazione geografica\",\n            5: \"Collocazione temporale\",\n            6: \"Numero di film\",\n            7: \"Durata della pellicola\",\n            8: \"Prima visione\",\n        },\n        mask:{\n            0: {0:'Christopher Nolan', 1:'Tim Burton', 2:'Steven Spielberg'},\n            1: {0:'Film d\\'animazione', 1:'Film con personaggi reali'},\n            2: {0:'Esseri umani', 1:'Animali', 2:'Robot/androidi/umanoidi'},\n            3: {0:'Fantascienza', 1:'Thriller', 2:'Avventura'},\n            4: {0: 'Stati Uniti d\\'America', 1:'Europa', 2:'Giappone', 3:'Marte'},\n            5: {0:'Fine 1800', 1:'2022', 2:'2100'},\n            6: {0:'Film unico', 1:'Saga'},\n            7: {0:'1 ora e 40 minuti', 1:'2 ore', 2:'2 ore e 20 minuti'},\n            8: {0:'Cinema', 1:'Piattaforme'},\n        }\n    },\n\n    // ENGLISH\n    en: {\n        attributes: {\n            0: \"Director\",\n            1: \"Type of film\",\n            2: \"Type of characters\",\n            3: \"Genre\",\n            4: \"Geografical setting\",\n            5: \"Temporal collocation\",\n            6: \"Number of movies\",\n            7: \"Duration of the film\",\n            8: \"First viewing\",\n        },\n        mask:{\n            0: {0:'Christopher Nolan', 1:'Tim Burton', 2:'Steven Spielberg'},\n            1: {0:'Animation film', 1:'Film with real characters'},\n            2: {0:'Humans', 1:'Animals', 2:'Robots/androids/humanoids'},\n            3: {0:'Science-fiction', 1:'Thriller', 2:'Adventure'},\n            4: {0: 'United States of America', 1:'Europe', 2:'Japan', 3:'Mars'},\n            5: {0:'End of the 19th century', 1:'2022', 2:'2100'},\n            6: {0:'Only one film', 1:'Saga'},\n            7: {0:'1 hour and 40 minutes', 1:'2 hours', 2:'2 hours and 20 minutes'},\n            8: {0:'Cinema', 1:'Platforms'},\n        }\n    },\n};\n","import { Button, Row, Col, Container } from \"reactstrap\";\nimport toast, { Toaster } from 'react-hot-toast';\nimport React, { useState, useEffect } from 'react'\nimport { SETTINGS } from \"./shared/settings\"\nimport * as axios from 'axios'\n\nconst CustomForm = (props) => {\n\n    const product_profiles = SETTINGS.product_profiles\n    const n_attributes = SETTINGS.n_attributes\n    const n_question = SETTINGS.n_questions\n    const DATA = props.data\n\n    const [selected, setselected] = useState(new Set())\n    const [control, setcontrol] = useState(new Set())\n    var [j, trial] = [0, [], []];\n\n    if (DATA.length % product_profiles !== 0) alert(\"Number of questions wrong!\")  \n\n    useEffect(() => {\n        selected.forEach(r => {\n            let box = document.getElementById(`row-${r}`)\n            let btn = document.getElementById(`btn-${r}`)\n            box.style.backgroundColor = \"lightgreen\" \n            btn.style.backgroundColor ='rgba(182, 41, 41,0.9)'\n            btn.innerText='Deselect'\n            })})\n\n    function saveSelect(id, idx){\n        var row_check = Math.floor(idx/2.9)\n        if (selected.has(id)){\n            let box = document.getElementById(`row-${id}`)\n            box.style.backgroundColor = \"rgb(250, 227, 227)\"\n            setcontrol(prev => new Set([...prev].filter(x => x !== row_check)))     \n            setselected(prev => new Set([...prev].filter(x => x !== id)))}\n        else{\n            setcontrol(prev => new Set(prev.add(row_check)))     \n            setselected(prev => new Set(prev.add(id)))}\n    }\n\n    function onFinalSubmit(){\n        if (selected.size < n_question) {\n            var missing = []\n            for (let i=0; i < n_question; i++){if (!control.has(i)) missing.push(i)}\n            toast.error(\n            <span>\n                {props.lang==='it'?\n                <span>Devi rispondere a tutte le domande, mancano le domande numero: <br/><br/> {missing.join(', ')}\n                </span>:\n                <span>Missing the following answers <br/><br/> {missing.join(', ')}</span>}\n            </span>)\n        }\n        else{\n            const FRESH_DATA = DATA.map(r => {\n                selected.has(r.id)? r.isChoiced = 1: r.isChoiced = 0\n                return r\n            })\n\n            axios.get(SETTINGS.jsonbin+\"latest\")\n                .then(res => {\n                    var prev = res.data\n                    prev.push(FRESH_DATA)\n                    axios.put(SETTINGS.jsonbin, prev)\n                        .then(toast.success('Thank you so much <3', {style: {padding:\"100px\"}}))\n                        .catch(e => console.log({e}))})\n                .catch(e =>  alert(\"Ops something went wrong! be sure that you starting JSONbin is an empty list. Error -> \" +  JSON.stringify(e.message)))\n        }\n    }\n    \n\n    for (let idx = 0; idx < DATA.length; idx+=3){\n        j++\n        const options = DATA.slice(idx, idx+ product_profiles)\n        const renderedOptions = options.map( r => { \n            const HandleChecked = () =>{ \n                if (control.has(Math.floor(idx/2.9)) && (selected.has(r.id))){\n                    return(\n                        <Button color='primary'  key={r.id}\n                            id={`btn-${r.id}`}\n                            className='question-button-col' \n                            onClick={()=>{saveSelect(r.id, idx);}}>\n                            {props.lang==='it'?<span>Seleziona</span>:<span>Select</span>}\n                    </Button>)} \n                else if (control.has(Math.floor(idx/2.9))){\n                    return(\n                        <Button color='primary'   key={r.id}\n                            id={`btn-${r.id}`}\n                            className='question-button-col' \n                            onClick={()=> {toast.error(\n                                <span>\n                                {props.lang==='it'? \n                                <span>\n                                    Numero massimo di scelte è 1 per domanda<br/><br/>\n                                    Se vuoi modificare la tua scelta deseleziona \n                                    ciò che hai già selezionato.\n                                </span>:\n                                <span>\n                                    Maximum Choice per question is 1 <br/>\n                                    Deselect first the other option.\n                                </span>}\n                                </span>, { style: {backgroundColor:\"rgb(238, 117, 117)\"}}\n         \n                            )}}>\n                            {props.lang==='it'?<span>Seleziona</span>:<span>Select</span>}\n                    </Button>)} \n                else{\n                    return(\n                        <Button color='primary'  key={r.id}\n                            id={`btn-${r.id}`}\n                            className='question-button-col' \n                            onClick={()=> {saveSelect(r.id, idx);}}>\n                            {props.lang==='it'?<span>Seleziona</span>:<span>Select</span>}\n\n                    </Button>\n                )}}\n           \n            const AttributesLevels = () => {\n                var renderedAttributes = []\n                for (let i = 0; i < n_attributes; i++){\n                    renderedAttributes.push(<Col xs='12' key={\"mask-\"+i}> {SETTINGS[props.lang].mask[i][r[i]]}</Col>)} \n                return renderedAttributes\n            }\n\n            return(\n            <Col sm='3' className='record-option text-center' id={`row-${r.id}`} key={\"last-\"+r.id}>\n                < AttributesLevels/>\n            <Col xs='12'>\n                < HandleChecked  />\n                </Col>\n            </Col>\n        )})\n\n\n        const Attributes = () =>{\n            var attributes = []\n            for (let i = 0; i < n_attributes; i++){\n                attributes.push(<Col xs='12' key={\"attrbute-\"+i}>{SETTINGS[props.lang].attributes[[i]]}</Col>);}\n            return attributes\n        }\n\n        trial.push(\n            <Row className='question-row align-items-center text-left' key={j}>\n                <Col xs='12'>\n                    <h4>{props.lang==='it'?<p>Domanda  {j}/{SETTINGS.n_questions}</p>:<p>Question  {j}/{SETTINGS.n_questions}</p>}</h4>\n                    <h5>\n                        {props.lang==='it'?<p>Scegli l'opzione che ritieni migliore.</p>\n                        :<p>Select the options that you prefer</p>}\n                        </h5>\n                </Col>\n                <Col sm='3' className='attribute-names text-center'>\n                    <h6>{props.lang==='it'?<p>Gli attributi si riferiscono a</p>:<p>The attributes refer to:</p>}</h6>\n                    <Attributes/>\n                    {window.innerWidth>800? <Col xs='12' className='question-button-col'>&nbsp;</Col>:null}\n                </Col>\n                    {renderedOptions}\n            </Row>\n        )\n  \n    }\n\n\n    return (\n        <Container className='text-center question-container'>\n             <Toaster />\n            <h1 className='questionario-title' id='title'>\n                {props.lang==='it'? <span>Questionario</span>: <span>Survey</span> }\n            </h1>\n            {trial}\n            <Col className='col-final-submit'>\n                <Button color='success' className='btn-go-form' onClick={()=>onFinalSubmit()}>\n                    {props.lang==='it'? <span>Invia Questionario</span>: <span>Submit Form</span> }\n                </Button>\n            </Col>\n        </Container>\n    )\n}\n\nexport default CustomForm\n","import { SETTINGS } from \"./shared/settings\";\n\nfunction shuffle_data(data){\n    function getRandomSubarray(arr, size) {\n        var shuffled = arr.slice(0), i = arr.length, temp, index;\n        while (i--) {\n            index = Math.floor((i + 1) * Math.random());\n            temp = shuffled[index];\n            shuffled[index] = shuffled[i];\n            shuffled[i] = temp;\n        }\n        return shuffled.slice(0, size);\n    }\n    return (getRandomSubarray(data, SETTINGS.n_questions * SETTINGS.product_profiles))\n}\n\nexport default shuffle_data;","\nexport const TEXT = {\n    en: {\n        title: <span>Economies</span>,\n        description: (\n            <span>\n                Hi, thanks for being here.\n                <br />\n                The following questions are designed to understand which may be the most important characteristics for a brand new movie.\n                Each question consists in choosing the best movie among three possible options. \n                Each of these options is defined by features or characteristics, which are explained below.\n\n                <br />\n                These features are:\n                <br/><br/>\n                &#8226; Director\n                        <ol> \n                            <li> Christopher Nolan (who directed movies such as \"Inception\", \"Interstellar\" and \"Tenet\") </li>\n                            <li> Tim Burton (who directed movies such as \"Edward Scissorhands\", \"Nightmare Before Christmas\" and \"Charlie and the Chocolate Factory\")  </li>\n                            <li> Steven Spielberg (who directed movies such as \"Back to the Future\", \"E.T. the Extra-Terrestrial\" and \"Saving Private Ryan\")  </li>\n                        </ol>\n                    <br/>\n                    &#8226; Type of film\n                        <ol> \n                            <li> Animation film </li>\n                            <li> Real-characters film  </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226; Type of characters\n                        <ol> \n                            <li> Humans </li>\n                            <li> Animals  </li>\n                            <li> Robot/androids/humanoids  </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Genre\n                        <ol>\n                            <li> Science-fiction </li>\n                            <li> Thriller </li>\n                            <li> Adventure </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Geographical setting\n                        <ol> \n                            <li> United States of America </li>\n                            <li> Europe </li>\n                            <li> Japan </li>\n                            <li> Mars (yes, the red planet itself) </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Temporal collocation\n                        <ol> \n                            <li> End of the 19th century  </li>\n                            <li> 2022 </li>\n                            <li> 2100 </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Number of movies\n                        <ol> \n                            <li> Only one film </li>\n                            <li> Film saga (2 movies or more) </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226;  Duration of the film\n                        <ol> \n                            <li> 1 hour and 40 minutes </li>\n                            <li> 2 hours </li>\n                            <li> 2 hours and 20 minutes </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226;  First viewing\n                        <ol> \n                            <li> Cinema (allows you, at the ticket price, to see it as soon as it comes out) </li>\n                            <li> Platforms (allows you to watch it for free - assuming you are already regularly subscribed to the platform - but late compared to the release in theaters) </li>\n                        </ol>\n                    <br/>\n                \n                The time to complete the form is estimated ~ 10 m.\n            </span>\n        ),\n        h2: <span>Video Tutorial</span>,\n        url: \"https://www.youtube.com/embed/9jusKbecLaQ\",\n    },\n\n    // /////////////////////////////////////////////////////////// IT\n    it: {\n        title: <span>Economies</span>,\n        description: (\n            <span>\n                Ciao, grazie per essere qui.\n                <br />\n                Le seguenti domande sono pensate per comprendere quali possano essere \n                le caratteristiche più importanti per un nuovo film.\n                Ogni domanda consiste nella scelta del migliore\n                film fra tre possibili opzioni. Ognuna di queste opzioni viene definita\n                da delle features o caratteristiche, di seguito spiegate.\n                <br />\n                Le features (caratteristiche che variano tra le opzioni) sono:\n                <br/><br/>\n                &#8226; Regista\n                        <ol> \n                            <li> Christopher Nolan (ha diretto pellicole quali Inception, Interstellar e Tenet) </li>\n                            <li> Tim Burton (ha diretto pellicole quali \"Edward Mani di Forbice\", \"Nightmare before Christmas\" e \"La Fabbrica di Cioccolato\")  </li>\n                            <li> Steven Spielberg (ha diretto film quali \"Ritorno al Futuro\", \"E.T. l'extraterrestre\" e \"Salvate il Soldato Ryan\")  </li>\n                        </ol>\n                    <br/>\n                    &#8226; Tipologia di film\n                        <ol> \n                            <li> Film d'animazione </li>\n                            <li> Film con personaggi reali  </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226; Tipologia di personaggi\n                        <ol> \n                            <li> Umani </li>\n                            <li> Animali  </li>\n                            <li> Robot/androidi/umanoidi  </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Genere cinematografico\n                        <ol>\n                            <li> Fantascienza </li>\n                            <li> Thriller </li>\n                            <li> Avventura </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Ambientazione geografica\n                        <ol> \n                            <li> Stati Uniti d'America </li>\n                            <li> Europa </li>\n                            <li> Giappone </li>\n                            <li> Marte (sì, proprio il pianeta rosso) </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Collocazione temporale\n                        <ol> \n                            <li> Fine 1800  </li>\n                            <li> 2022 </li>\n                            <li> 2100 </li>\n                        </ol>\n                    <br/>\n                    &#8226;  Numero di film\n                        <ol> \n                            <li> Film unico </li>\n                            <li> Saga (2 o più film) </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226;  Durata della pellicola\n                        <ol> \n                            <li> 1 ora e 40 minuti </li>\n                            <li> 2 ore </li>\n                            <li> 2 ore e 20 minuti </li>\n                        </ol>\n                    <br/>\n                    <br/>\n                    &#8226;  Prima visione\n                        <ol> \n                            <li> Cinema (consente, al prezzo del biglietto, di vederlo all'uscita ufficiale) </li>\n                            <li> Piattaforme (consente di fruirne gratuitamente - immaginando di essere già regolarmente abbonati alla piattaforma - ma in ritardo rispetto all'uscita nelle sale) </li>\n                        </ol>\n                    <br/>\n                \n               Il tempo di completamento del form è di circa 10 minuti.\n            </span>\n        ),\n        h2: <span>Video Tutorial</span>,\n        url: \"https://www.youtube.com/embed/9jusKbecLaQ\",\n    },\n};\n","import ReactCountryFlag from \"react-country-flag\"\nimport { Row, Col, Button } from 'reactstrap'\nimport { TEXT } from './shared/text'\nimport Iframe from 'react-iframe'\nimport React from 'react'\n\nconst Header = (props) => {\n    return (\n        <React.Fragment>\n            <Row>\n                <Col xs='12'>\n                    <img src= {process.env.PUBLIC_URL+\"/home.jpg\"} className='home-image' alt='useless image'/>\n                </Col>\n            </Row>\n            <div className='container-div'>\n                <Row>\n                    <Col xs='12' sm='auto' >\n                        <h2 className='home-title' > {TEXT[props.lang].title}<br /><span style={{ fontSize: \"1.5rem\" }}>Conjoint Choice Based Survey</span></h2>\n                    </Col>\n                    <Col xs='12' md='auto' className='align-self-center text-center'>\n                        <Button onClick={() => props.langF('it')} className='italian-button'>\n                            <ReactCountryFlag countryCode=\"IT\" svg className='italian-flag' />\n                        </Button>\n                        <Button onClick={() => props.langF('en')} className='english-button'>\n                            <ReactCountryFlag countryCode=\"GB\" svg className=\"english-flag\" />\n                        </Button>\n                    </Col>\n                    <Col xs='12' className='home-description-text'><hr />{TEXT[props.lang].description}<hr /></Col>\n                    <Col xs='12' className='text-center button-go-form'>\n                        <hr />\n                        <Button color='success' className=\"btn-go-form\" onClick={() => { document.getElementById('title').scrollIntoView({ behavior: \"smooth\" }) }}>\n                            {props.lang === 'it' ? <span>Vai al questionario</span> : <span>Go to the Survey</span>}\n                        </Button>\n                        <hr />\n                    </Col>\n                </Row>\n\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Header;","import {Row , Col, List, ListInlineItem, Container } from 'reactstrap';\n\nexport const Footer = () => {\n    return(\n        <Row className='myFooter align-items-center' >\n            <Container style={{paddingTop:\"10px\"}}>\n            <Col className='text-center'>\n                <span>@Copyright GabrieleGhisleni</span>\n            </Col>\n            <Col className='text-center Icons'>\n            <List type=\"inline\">\n                            <ListInlineItem>\n                                <a href=\"https://github.com/GabrieleGhisleni\">\n                                    <i className=\"fa fa-github fa-lg\"></i>\n                                </a>\n                            </ListInlineItem>\n                            <ListInlineItem>\n                                <a href=\"https://www.linkedin.com/in/gabriele-ghisleni-bb553a199/\">\n                                    <i className=\"fa fa-linkedin fa-lg\"></i>\n                                </a>\n                            </ListInlineItem>\n                            <ListInlineItem>\n                                <a href=\"mailto:gabriele.ghisleni01@gmail.com\">\n                                    <i className=\"fa fa-envelope-o fa-lg\"></i>\n                                </a>\n                            </ListInlineItem>\n                        </List>\n            </Col>\n        </Container>\n        </Row>  \n    );\n}\n\nexport default Footer;","import React, {  Component } from 'react'\nimport { Container }from 'reactstrap'\n\nimport * as data from './shared/data.json';\nimport * as axios from 'axios'\nimport CustomForm from './CustomForm'\nimport shuffle_data from './shuffle';\nimport Header from \"./Header\";\nimport Footer from './Footer'; \nimport { SETTINGS } from './shared/settings';\n\nclass  Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { lang:'it', previous:null }\n        this.changeLang = this.changeLang.bind(this)}\n\n    changeLang(val){this.setState({lang:val})}\n    componentDidMount(){\n        // axios.get(SETTINGS.jsonbin+\"latest\")\n        // .then(res => \"\")\n        // .catch(e => {alert(\"JSON BIN WRONG\")})\n    }\n    \n    render() { \n        const DATA = data.default\n        const SHUFFLE_DATA = shuffle_data(DATA)\n        return ( \n        <React.Fragment>\n            <Container className='main-container'>\n                <Header lang={this.state.lang} langF={this.changeLang}/>\n                <CustomForm lang={this.state.lang} data={SHUFFLE_DATA}/>\n            </Container>\n            <Footer />\n        </React.Fragment>  );\n    }\n}\n \n\nexport default Main;","import React from \"react\";\nimport Main from './components/Main'\nimport './css/style.css'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}